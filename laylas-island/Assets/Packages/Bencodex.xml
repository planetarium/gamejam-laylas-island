<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Bencodex</name>
    </assembly>
    <members>
        <member name="T:Bencodex.Codec">
            <summary>The most basic and the lowest-level interface to encode and
            decode Bencodex values.  This provides two types of input and output:
            <c cref="T:System.Byte">Byte</c> arrays and I/O
            <c cref="T:System.IO.Stream">Stream</c>s.</summary>
        </member>
        <member name="M:Bencodex.Codec.Encode(Bencodex.Types.IValue)">
            <summary>
            Encodes a <paramref name="value"/> into a single
            <c cref="T:System.Byte">Byte</c> array, rather than split into
            multiple chunks.</summary>
            <param name="value">A value to encode.</param>
            <returns>A single <c cref="T:System.Byte">Byte</c> array which
            contains the whole Bencodex representation of
            the <paramref name="value"/>.</returns>
        </member>
        <member name="M:Bencodex.Codec.Encode(Bencodex.Types.IValue,System.IO.Stream)">
            <summary>Encodes a <paramref name="value"/>,
            and write it on an <paramref name="output"/> stream.</summary>
            <param name="value">A value to encode.</param>
            <param name="output">A stream that a value is printed on.</param>
            <exception cref="T:System.ArgumentException">Thrown when a given
            <paramref name="output"/> stream is not writable.</exception>
        </member>
        <member name="M:Bencodex.Codec.Decode(System.IO.Stream)">
            <summary>Decodes an encoded value from an <paramref name="input"/>
            stream.</summary>
            <param name="input">An input stream to decode.</param>
            <returns>A decoded value.</returns>
            <exception cref="T:System.ArgumentException">Thrown when a given
            <paramref name="input"/> stream is not readable.</exception>
            <exception cref="T:Bencodex.DecodingException">Thrown when a binary
            representation of an <paramref name="input"/> stream is not a valid
            Bencodex encoding.</exception>
        </member>
        <member name="M:Bencodex.Codec.Decode(System.Byte[])">
            <summary>Decodes an encoded value from a
            <c cref="T:System.Byte">Byte</c> array.</summary>
            <param name="bytes">A <c cref="T:System.Byte">Byte</c> array of
            Bencodex encoding.</param>
            <returns>A decoded value.</returns>
            <exception cref="T:Bencodex.DecodingException">Thrown when a
            <paramref name="bytes"/> representation is not a valid Bencodex
            encoding.</exception>
        </member>
        <member name="T:Bencodex.CodecException">
            <summary>Serves as the base class for codec exceptions.</summary>
            <inheritdoc />
        </member>
        <member name="T:Bencodex.DecodingException">
            <summary>The exception that is thrown when an input is not
            a valid Bencodex encoding so that a decoder cannot parse it.</summary>
            <inheritdoc />
        </member>
        <member name="T:Bencodex.Misc.ByteArrayComparer">
            <summary>
            Similar to <see cref="T:System.StringComparer"/> but for <see cref="T:System.Byte"/>s instead of Unicode
            <see cref="T:System.String"/>s.
            </summary>
        </member>
        <member name="T:Bencodex.Misc.CompositeComparer`2">
            <summary>Compose given two comparers into one comparer.</summary>
            <typeparam name="TA">An element type of the first comparer.</typeparam>
            <typeparam name="TB">An element type of the second comparer.</typeparam>
        </member>
        <member name="T:Bencodex.Types.Boolean">
            <summary>Represents a Bencodex Boolean true (i.e., <c>t</c>)
            or false (i.e., <c>f</c>).</summary>
        </member>
        <member name="T:Bencodex.Types.IValue">
            <summary>Represents a possible value in Bencodex representation.
            </summary>
            <seealso cref="T:Bencodex.Types.Null"/>
            <seealso cref="T:Bencodex.Types.Boolean"/>
            <seealso cref="T:Bencodex.Types.Integer"/>
            <seealso cref="T:Bencodex.Types.Binary"/>
            <seealso cref="T:Bencodex.Types.Text"/>
            <seealso cref="T:Bencodex.Types.List"/>
            <seealso cref="T:Bencodex.Types.Dictionary"/>
        </member>
        <member name="P:Bencodex.Types.IValue.Inspection">
            <summary>A JSON-like human-readable representation for
            debugging.</summary>
            <returns>A JSON-like representation.</returns>
        </member>
        <member name="M:Bencodex.Types.IValue.EncodeIntoChunks">
            <summary>Encodes the value into <c cref="T:System.Byte">Byte</c>
            arrays.</summary>
            <returns><c cref="T:System.Byte">Byte</c> arrays of Bencodex
            representation of the value.</returns>
            <seealso cref="M:Bencodex.Codec.Encode(Bencodex.Types.IValue)"/>
            <seealso cref="M:Bencodex.Codec.Encode(Bencodex.Types.IValue,System.IO.Stream)"/>
        </member>
        <member name="M:Bencodex.Types.IValue.EncodeToStream(System.IO.Stream)">
            <summary>Writes the encoded value into <paramref name="stream"/>.
            </summary>
            <param name="stream">A stream to write the encoded value.</param>
            <seealso cref="M:Bencodex.Codec.Encode(Bencodex.Types.IValue)"/>
            <seealso cref="M:Bencodex.Codec.Encode(Bencodex.Types.IValue,System.IO.Stream)"/>
            <seealso cref="M:Bencodex.Types.IValue.EncodeIntoChunks"/>
        </member>
        <member name="T:Bencodex.Types.Null">
            <summary>Represents a Bencodex null value (i.e., <c>n</c>).</summary>
        </member>
        <member name="F:Bencodex.Types.Null.Value">
            <summary>
            Represents a <see cref="T:Bencodex.Types.Null"/> instance.  Recommends to prefer this over using
            the default constructor or a <c>default</c> keyword.  This field is read-only.
            </summary>
        </member>
    </members>
</doc>
