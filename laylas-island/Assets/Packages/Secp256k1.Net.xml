<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Secp256k1.Net</name>
    </assembly>
    <members>
        <member name="T:Secp256k1Net.secp256k1_context_create">
            <summary>
            Create a secp256k1 context object.
            </summary>
            <param name="flags">which parts of the context to initialize.</param>
            <returns>a newly created context object.</returns>
        </member>
        <member name="T:Secp256k1Net.secp256k1_context_destroy">
            <summary>
            Destroy a secp256k1 context object. The context pointer may not be used afterwards.
            </summary>
            <param name="ctx">ctx: an existing context to destroy (cannot be NULL).</param>
        </member>
        <member name="T:Secp256k1Net.secp256k1_ecdsa_sign_recoverable">
            <summary>
            Create a recoverable ECDSA signature.
            </summary>
            <param name="ctx">pointer to a context object, initialized for signing (cannot be NULL)</param>
            <param name="sig">(Output) pointer to an array where the signature will be placed (cannot be NULL)</param>
            <param name="msg32">the 32-byte message hash being signed (cannot be NULL)</param>
            <param name="seckey">pointer to a 32-byte secret key (cannot be NULL)</param>
            <param name="noncefp">pointer to a nonce generation function. If NULL, secp256k1_nonce_function_default is used</param>
            <param name="ndata">pointer to arbitrary data used by the nonce generation function (can be NULL)</param>
            <returns>
            1: signature created
            0: the nonce generation function failed, or the private key was invalid.
            </returns>
        </member>
        <member name="T:Secp256k1Net.secp256k1_ec_pubkey_create">
            <summary>
            Obtains the public key for a given private key.
            </summary>
            <param name="ctx">pointer to a context object, initialized for signing (cannot be NULL)</param>
            <param name="pubKeyOut">(Output) pointer to the created public key (cannot be NULL)</param>
            <param name="privKeyIn">(Input) pointer to a 32-byte private key (cannot be NULL)</param>
            <returns>
            1: secret was valid, public key stores
            0: secret was invalid, try again
            </returns>
        </member>
        <member name="T:Secp256k1Net.secp256k1_ec_pubkey_parse">
            <summary>
            Parse a variable-length public key into the pubkey object.
            This function supports parsing compressed (33 bytes, header byte 0x02 or
            0x03), uncompressed(65 bytes, header byte 0x04), or hybrid(65 bytes, header
            byte 0x06 or 0x07) format public keys.
            </summary>
            <param name="ctx">a secp256k1 context object.</param>
            <param name="pubkey">(Output) pointer to a pubkey object. If 1 is returned, it is set to a parsed version of input. If not, its value is undefined.</param>
            <param name="input">pointer to a serialized public key.</param>
            <param name="inputlen">length of the array pointed to by input</param>
            <returns>1 if the public key was fully valid, 0 if the public key could not be parsed or is invalid.</returns>
        </member>
        <member name="T:Secp256k1Net.secp256k1_ec_pubkey_serialize">
            <summary>
            Serialize a pubkey object into a serialized byte sequence.
            </summary>
            <param name="ctx">a secp256k1 context object.</param>
            <param name="output">a pointer to a 65-byte (if compressed==0) or 33-byte (if compressed==1) byte array to place the serialized key in.</param>
            <param name="outputlen">a pointer to an integer which is initially set to the size of output, and is overwritten with the written size.</param>
            <param name="pubkey">a pointer to a secp256k1_pubkey containing an initialized public key.</param>
            <param name="flags">SECP256K1_EC_COMPRESSED if serialization should be in compressed format, otherwise SECP256K1_EC_UNCOMPRESSED.</param>
            <returns>1 always</returns>
        </member>
        <member name="T:Secp256k1Net.secp256k1_ec_seckey_verify">
            <summary>
            Verify an ECDSA secret key.
            </summary>
            <param name="ctx">a secp256k1 context object.</param>
            <param name="seckey">Pointer to a 32-byte secret key.</param>
            <returns>1 if secret key is valid, 0 if secret key is invalid.</returns>
        </member>
        <member name="T:Secp256k1Net.secp256k1_ecdsa_signature_normalize">
            <summary>
            Normalizes a signature and enforces a low-S.
            </summary>
            <param name="ctx">pointer to a context object, initialized for signing (cannot be NULL)</param>
            <param name="sigout">(Output) pointer to an array where the normalized signature will be placed (cannot be NULL)</param>
            <param name="sigin">(Input) pointer to an array where a signature to normalize resides (cannot be NULL)</param>
            <returns>1: correct signature, 0: incorrect or unparseable signature</returns>
        </member>
        <member name="T:Secp256k1Net.secp256k1_ecdsa_signature_parse_der">
            <summary>
            Parse a DER ECDSA signature
            This function will accept any valid DER encoded signature, even if the
            encoded numbers are out of range.
            After the call, sig will always be initialized. If parsing failed or the
            encoded numbers are out of range, signature validation with it is
            guaranteed to fail for every message and public key.
            </summary>
            <param name="ctx">a secp256k1 context object (cannot be NULL)</param>
            <param name="sig">(Output) pointer to an array where the parsed signature will be placed (cannot be NULL)</param>
            <param name="input">(Input) pointer to an array where a signature to parse resides (cannot be NULL)</param>
            <param name="inputlen">length of the array pointed to by input</param>
            <returns>1: correct signature, 0: incorrect or unparseable signature</returns>
        </member>
        <member name="T:Secp256k1Net.secp256k1_ecdsa_signature_serialize_der">
            <summary>
            Serialize an ECDSA signature in DER format (72 bytes maximum)
            This function will accept any valid ECDSA encoded signature
            After the call, output will always be initialized.
            </summary>
            <param name="ctx">a secp256k1 context object (cannot be NULL)</param>
            <param name="output">(Output) pointer to an array where the serialized signature will be placed (cannot be NULL)</param>    
            <param name="outputlen">which is initially set to the size of output, and is overwritten with the written size (cannot be NULL)</param>
            <param name="sig">(Input) pointer to an array where a signature to parse resides (cannot be NULL)</param>
            <returns>1: correct signature, 0: incorrect or unserializeble signature</returns>
        </member>
        <member name="T:Secp256k1Net.secp256k1_ecdsa_recoverable_signature_serialize_compact">
            <summary>
            Serialize an ECDSA signature in compact format (64 bytes + recovery id).
            </summary>
            <param name="ctx">a secp256k1 context object</param>
            <param name="output64">(Output) a pointer to a 64-byte array of the compact signature (cannot be NULL).</param>
            <param name="recid">(Output) a pointer to an integer to hold the recovery id (can be NULL).</param>
            <param name="sig">a pointer to an initialized signature object (cannot be NULL).</param>
            <returns>1 always</returns>
        </member>
        <member name="T:Secp256k1Net.secp256k1_ecdsa_recover">
            <summary>
            Recover an ECDSA public key from a signature.
            </summary>
            <param name="ctx">pointer to a context object, initialized for verification (cannot be NULL)</param>
            <param name="pubkey">(Output) pointer to the recovered public key (cannot be NULL)</param>
            <param name="sig">pointer to initialized signature that supports pubkey recovery (cannot be NULL)</param>
            <param name="msg32">the 32-byte message hash assumed to be signed (cannot be NULL)</param>
            <returns>
            1: public key successfully recovered (which guarantees a correct signature).
            0: otherwise.
            </returns>
        </member>
        <member name="T:Secp256k1Net.secp256k1_ecdsa_recoverable_signature_parse_compact">
            <summary>
            Parse a compact ECDSA signature (64 bytes + recovery id).
            </summary>
            <param name="ctx">a secp256k1 context object</param>
            <param name="sig">(Output) a pointer to a signature object</param>
            <param name="input64">a pointer to a 64-byte compact signature</param>
            <param name="recid">the recovery id (0, 1, 2 or 3)</param>
            <returns>1 when the signature could be parsed, 0 otherwise</returns>
        </member>
        <member name="T:Secp256k1Net.secp256k1_ecdsa_verify">
            <summary>
            Verify an ECDSA signature.
            To avoid accepting malleable signatures, only ECDSA signatures in lower-S
            form are accepted.
            If you need to accept ECDSA signatures from sources that do not obey this
            rule, apply secp256k1_ecdsa_signature_normalize to the signature prior to
            validation, but be aware that doing so results in malleable signatures.
            For details, see the comments for that function.
            </summary>
            <param name="ctx">a secp256k1 context object, initialized for verification.</param>
            <param name="sig">the signature being verified (cannot be NULL)</param>
            <param name="msg32">the 32-byte message hash being verified (cannot be NULL)</param>
            <param name="pubkey">pointer to an initialized public key to verify with (cannot be NULL)</param>
            <returns>1: correct signature, 0: incorrect or unparseable signature</returns>
        </member>
        <member name="T:Secp256k1Net.secp256k1_ecdsa_sign">
            <summary>
            Create an ECDSA signature. The created signature is always in lower-S form. See
            secp256k1_ecdsa_signature_normalize for more details.
            </summary>
            <param name="ctx">Pointer to a context object, initialized for signing (cannot be NULL).</param>
            <param name="sig">Pointer to an array where the signature will be placed (cannot be NULL).</param>
            <param name="msg32">The 32-byte message hash being signed (cannot be NULL).</param>
            <param name="seckey">Pointer to a 32-byte secret key (cannot be NULL).</param>
            <param name="noncefp">Pointer to a nonce generation function. If NULL, secp256k1_nonce_function_default is used.</param>
            <param name="ndata">Pointer to arbitrary data used by the nonce generation function (can be NULL).</param>
            <returns>1: signature created, 0: the nonce generation function failed, or the private key was invalid.</returns>
        </member>
        <member name="T:Secp256k1Net.secp256k1_ecdh">
            <summary>
            Compute an EC Diffie-Hellman secret in constant time.
            </summary>
            <param name="ctx">Pointer to a context object (cannot be NULL).</param>
            <param name="output">Pointer to an array to be filled by the function.</param>
            <param name="pubkey">A pointer to a secp256k1_pubkey containing an initialized public key.</param>
            <param name="privkey">A 32-byte scalar with which to multiply the point.</param>
            <param name="hashfp">Pointer to a hash function. If NULL, secp256k1_ecdh_hash_function_sha256 is used.</param>
            <param name="data">Arbitrary data pointer that is passed through.</param>
            <returns>1: exponentiation was successful, 0: scalar was invalid(zero or overflow)</returns>
        </member>
        <member name="F:Secp256k1Net.Flags.SECP256K1_FLAGS_TYPE_MASK">
            All flags' lower 8 bits indicate what they're for. Do not use directly. 
        </member>
        <member name="F:Secp256k1Net.Flags.SECP256K1_FLAGS_BIT_CONTEXT_VERIFY">
            The higher bits contain the actual data. Do not use directly. 
        </member>
        <member name="F:Secp256k1Net.Flags.SECP256K1_CONTEXT_VERIFY">
            Flags to pass to secp256k1_context_create. 
        </member>
        <member name="F:Secp256k1Net.Flags.SECP256K1_EC_COMPRESSED">
            Flag to pass to secp256k1_ec_pubkey_serialize and secp256k1_ec_privkey_export. 
        </member>
        <member name="T:Secp256k1Net.EcdhHashFunction">
            <summary>
            A pointer to a function that applies hash function to a point.
            Returns: 1 if a point was successfully hashed. 0 will cause ecdh to fail.
            </summary>
            <param name="output">Pointer to an array to be filled by the function.</param>
            <param name="x">Pointer to a 32-byte x coordinate.</param>
            <param name="y">Pointer to a 32-byte y coordinate.</param>
            <param name="data">Arbitrary data pointer that is passed through.</param>
            <returns>Returns: 1 if a point was successfully hashed. 0 will cause ecdh to fail.</returns>
        </member>
        <member name="M:Secp256k1Net.Secp256k1.Recover(System.Span{System.Byte},System.Span{System.Byte},System.Span{System.Byte})">
            <summary>
            Recover an ECDSA public key from a signature.
            </summary>
            <param name="publicKeyOutput">Output for the 64 byte recovered public key to be written to.</param>
            <param name="signature">The initialized signature that supports pubkey recovery.</param>
            <param name="message">The 32-byte message hash assumed to be signed.</param>
            <returns>
            True if the public key successfully recovered (which guarantees a correct signature).
            </returns>
        </member>
        <member name="M:Secp256k1Net.Secp256k1.SecretKeyVerify(System.Span{System.Byte})">
            <summary>
            Verify an ECDSA secret key.
            </summary>
            <param name="secretKey">32-byte secret key.</param>
            <returns>True if secret key is valid, false if secret key is invalid.</returns>
        </member>
        <member name="M:Secp256k1Net.Secp256k1.PublicKeyCreate(System.Span{System.Byte},System.Span{System.Byte})">
            <summary>
            Gets the public key for a given private key.
            </summary>
            <param name="publicKeyOutput">Output for the 64 byte recovered public key to be written to.</param>
            <param name="privateKeyInput">The input private key to obtain the public key for.</param>
            <returns>
            True if the private key is valid and public key was obtained.
            </returns>
        </member>
        <member name="M:Secp256k1Net.Secp256k1.RecoverableSignatureParseCompact(System.Span{System.Byte},System.Span{System.Byte},System.Int32)">
            <summary>
            Parse a compact ECDSA signature (64 bytes + recovery id).
            </summary>
            <param name="signatureOutput">Output for the signature to be written to.</param>
            <param name="compactSignature">The 64-byte compact signature input.</param>
            <param name="recoveryID">The recovery id (0, 1, 2 or 3).</param>
            <returns>True when the signature could be parsed.</returns>
        </member>
        <member name="M:Secp256k1Net.Secp256k1.SignRecoverable(System.Span{System.Byte},System.Span{System.Byte},System.Span{System.Byte})">
            <summary>
            Create a recoverable ECDSA signature.
            </summary>
            <param name="signatureOutput">Output where the signature will be placed.</param>
            <param name="messageHash">The 32-byte message hash being signed.</param>
            <param name="secretKey">A 32-byte secret key.</param>
            <returns>
            True if signature created, false if the nonce generation function failed, or the private key was invalid.
            </returns>
        </member>
        <member name="M:Secp256k1Net.Secp256k1.RecoverableSignatureSerializeCompact(System.Span{System.Byte},System.Int32@,System.Span{System.Byte})">
            <summary>
            Serialize an ECDSA signature in compact format (64 bytes + recovery id).
            </summary>
            <param name="compactSignatureOutput">Output for the 64-byte array of the compact signature.</param>
            <param name="recoveryID">The recovery ID.</param>
            <param name="signature">The initialized signature.</param>
        </member>
        <member name="M:Secp256k1Net.Secp256k1.PublicKeySerialize(System.Span{System.Byte},System.Span{System.Byte},Secp256k1Net.Flags)">
            <summary>
            Serialize a pubkey object into a serialized byte sequence.
            </summary>
            <param name="serializedPublicKeyOutput">65-byte (if compressed==0) or 33-byte (if compressed==1) output to place the serialized key in.</param>
            <param name="publicKey">The secp256k1_pubkey initialized public key.</param>
            <param name="flags">SECP256K1_EC_COMPRESSED if serialization should be in compressed format, otherwise SECP256K1_EC_UNCOMPRESSED.</param>
        </member>
        <member name="M:Secp256k1Net.Secp256k1.PublicKeyParse(System.Span{System.Byte},System.Span{System.Byte})">
            <summary>
            Parse a variable-length public key into the pubkey object.
            This function supports parsing compressed (33 bytes, header byte 0x02 or
            0x03), uncompressed(65 bytes, header byte 0x04), or hybrid(65 bytes, header
            byte 0x06 or 0x07) format public keys.
            </summary>
            <param name="publicKeyOutput">(Output) pointer to a pubkey object. If 1 is returned, it is set to a parsed version of input. If not, its value is undefined.</param>
            <param name="serializedPublicKey">Serialized public key.</param>
            <returns>True if the public key was fully valid, false if the public key could not be parsed or is invalid.</returns>
        </member>
        <member name="M:Secp256k1Net.Secp256k1.SignatureNormalize(System.Span{System.Byte},System.Span{System.Byte})">
            <summary>
            Normalizes a signature and enforces a low-S.
            </summary>
            <param name="normalizedSignatureOutput">(Output) Signature to fill with the normalized form, or copy if the input was already normalized.</param>
            <param name="signatureInput">(Input) signature to check/normalize, can be identical to sigout</param>
            <returns>True if sigin was not normalized, false if it already was.</returns>
        </member>
        <member name="M:Secp256k1Net.Secp256k1.SignatureParseDer(System.Span{System.Byte},System.Span{System.Byte})">
            <summary>
            Parse a DER ECDSA signature
            This function will accept any valid DER encoded signature, even if the
            encoded numbers are out of range.
            After the call, sig will always be initialized. If parsing failed or the
            encoded numbers are out of range, signature validation with it is
            guaranteed to fail for every message and public key.
            </summary>
            <param name="signatureOutput">(Output) a signature object</param>
            <param name="signatureInput">(Input) a signature to be parsed</param>
            <returns>True when the signature could be parsed, false otherwise.</returns>       
        </member>
        <member name="M:Secp256k1Net.Secp256k1.SignatureSerializeDer(System.Span{System.Byte},System.Span{System.Byte},System.Int32@)">
            <summary>
            Serialize an ECDSA signature in DER format (72 bytes maximum)
            This function will accept any valid ECDSA encoded signature
            </summary>
            <param name="signatureOutput">(Output) a signature object</param>
            <param name="signatureInput">(Input) a signature to be parsed</param>
            <param name="singatureOutputLength">(Output) lenght of serialized DER signature</param>
            <returns>True when the signature could be serialized, false otherwise.</returns>
        </member>
        <member name="M:Secp256k1Net.Secp256k1.Verify(System.Span{System.Byte},System.Span{System.Byte},System.Span{System.Byte})">
            <summary>
            Verify an ECDSA signature.
            To avoid accepting malleable signatures, only ECDSA signatures in lower-S
            form are accepted.
            If you need to accept ECDSA signatures from sources that do not obey this
            rule, apply secp256k1_ecdsa_signature_normalize to the signature prior to
            validation, but be aware that doing so results in malleable signatures.
            For details, see the comments for that function.
            </summary>
            <param name="signature">The signature being verified.</param>
            <param name="messageHash">The 32-byte message hash being verified.</param>
            <param name="publicKey">An initialized public key to verify with.</param>
            <returns>True if correct signature, false if incorrect or unparseable signature.</returns>
        </member>
        <member name="M:Secp256k1Net.Secp256k1.Sign(System.Span{System.Byte},System.Span{System.Byte},System.Span{System.Byte})">
            <summary>
            Create an ECDSA signature.
            The created signature is always in lower-S form. See
            secp256k1_ecdsa_signature_normalize for more details.
            </summary>
            <param name="signatureOutput">An array where the signature will be placed.</param>
            <param name="messageHash">The 32-byte message hash being signed.</param>
            <param name="secretKey">A 32-byte secret key.</param>
            <returns></returns>
        </member>
        <member name="M:Secp256k1Net.Secp256k1.Ecdh(System.Span{System.Byte},System.Span{System.Byte},System.Span{System.Byte})">
            <summary>
            Compute an EC Diffie-Hellman secret in constant time.
            </summary>
            <param name="resultOutput">A 32-byte array which will be populated by an ECDH secret computed from the point and scalar.</param>
            <param name="publicKey">A secp256k1_pubkey containing an initialized public key.</param>
            <param name="privateKey">A 32-byte scalar with which to multiply the point.</param>
            <returns>True if exponentiation was successful, false if scalar was invalid (zero or overflow).</returns>
        </member>
        <member name="M:Secp256k1Net.Secp256k1.Ecdh(System.Span{System.Byte},System.Span{System.Byte},System.Span{System.Byte},Secp256k1Net.EcdhHashFunction,System.IntPtr)">
            <summary>
            Compute an EC Diffie-Hellman secret in constant time.
            </summary>
            <param name="resultOutput">A 32-byte array which will be populated by an ECDH secret computed from the point and scalar.</param>
            <param name="publicKey">A secp256k1_pubkey containing an initialized public key.</param>
            <param name="privateKey">A 32-byte scalar with which to multiply the point.</param>
            <param name="hashFunction">Pointer to a hash function. If null, sha256 is used.</param>
            <param name="data">Arbitrary data that is passed through.</param>
            <returns>True if exponentiation was successful, false if scalar was invalid (zero or overflow).</returns>
        </member>
    </members>
</doc>
